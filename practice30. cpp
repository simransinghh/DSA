#include <iostream>
using namespace std;
int Solution::calculateMinimumHP(vector<vector<int> > &dungeon) {
            int M = dungeon.size();
            int N = dungeon[0].size();
            vector<vector<int> > hp(M + 1, vector<int>(N + 1, INT_MAX));
            hp[M][N - 1] = 1;
            hp[M - 1][N] = 1;
            for (int i = M - 1; i >= 0; i--) {
                for (int j = N - 1; j >= 0; j--) {
                    int need = min(hp[i + 1][j], hp[i][j + 1]) - dungeon[i][j];
                    hp[i][j] = need <= 0 ? 1 : need;
                }
            }
            return hp[0][0]; 
        }

int Solution::calculateMinimumHP(vector<vector<int> > &A) {
    int n = A.size(),m = A[0].size();
    vector<vector<int> dp(n,vector<int>(m,INT_MAX));
    dp[n-1][m-1] = A[n-1][m-1]*(-1);
    if(A[n-1][m-1]<0) dp[n-1][m-1]++;
    for(int i = m-2;i>=0;i--){
        if(dp[n-1][i+1] <= 0){
             dp[n-1][i] = A[n-1][i]*(-1);
             if(A[n-1][i]<0) dp[n-1][i]++;
        }
        else dp[n-1][i] = A[n-1][i]*(-1) + dp[n-1][i+1]; 
    }
    for(int i = m-2;i>=0;i--){
        if(dp[i+1][m-1] <= 0){
             dp[i][m-1] = A[i][m-1]*(-1);
             if(A[i][m-1]<0) dp[i][m-1]++;
        }
        else dp[i][m-1] = A[i][m-1]*(-1) + dp[i+1][m-1]; 
    }
    for(int i = n-2;i>=0;i--){
        for(int j = m-2;j>=0;j--){
            int mini = min(dp[i+1][j],dp[i][j+1]);
            if(mini <= 0){
                mini = 0; 
                dp[i][j] = A[i][j]*(-1);
                if(A[i][j]<0) dp[i][j]++;
            }
            else dp[i][j] = A[i][j]*(-1) + mini; 
        }
    }
    return dp[0][0];
}





int Solution::minimumTotal(vector<vector<int> > &A) {
    int n = A.size();
    if(n==1) return A[0][0];
    vector<int> vec = A[n-1];
    int i = n-2;
    while(i >=0)
    {
        for(int j=0;j<=i;j++)
            vec[j] = min(vec[j],vec[j+1])+A[i][j];
        vec.erase(vec.end()-1);
        i--;
    }
    return vec[0];
}

int Solution::minPathSum(vector<vector<int>> &A) {
    int m = A.size(), n = A[0].size(), dp[m][n];
    for(int i=m-1; i>=0; i--)
        for(int j=n-1; j>=0; j--)
            if(i==m-1 && j==n-1) dp[i][j] = A[i][j];
            else if(i==m-1) dp[i][j] = A[i][j] + dp[i][j+1];
            else if(j==n-1) dp[i][j] = A[i][j] + dp[i+1][j];            
            else dp[i][j] = A[i][j] + min(dp[i+1][j], dp[i][j+1]);
    return dp[0][0];
}

int Solution::uniquePathsWithObstacles(vector<vector<int> > &A) {
int M = A.size(); int N = A[0].size();

int dp[M+1][N+1]; 
for(int i=0;i<=M;i++)dp[i][0]=0;
for(int i=0;i<=N;i++)dp[0][i]=0;
dp[1][1]=1;
for(int i=1;i<=M;i++)
{
    for(int j=1;j<=N;j++)
    {
        if(A[i-1][j-1]==0){
            if(i==1 and j==1)continue;
            dp[i][j]=dp[i-1][j]+dp[i][j-1];
        }
        else dp[i][j]=0;
    }
}
return dp[M][N];
    
}



int Solution::solve(vector &a, int sum) {

int n = a.size();

bool dp[n+1][sum+1];

for(int i=0; i<=sum; i++)
	dp[0][i] = false;

for(int i=0; i<=n; i++)
	dp[i][0] = true;

for(int i=1; i<=n; i++){
	for(int j=1; j<=sum; j++){
		if(j<a[i-1])
			dp[i][j] = dp[i-1][j];

		else
			dp[i][j] = (dp[i-1][j] || dp[i-1][j-a[i-1]]);
	}
}

return dp[n][sum];
}

int main() {
    cout<<"Hello World!";
}
