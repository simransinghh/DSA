#include <bits/stdc++.h>
using namespace std;


#include <list>
void lendfs(int &ans,int root,int len,unordered_map<int,list<int>> adj,vector<int> &node,int parent){
    if(adj[root].size()==1 && adj[root].front()==parent){
        if(ans<len){
            ans = len;
            node = root;
        }
        return;
    }
    for(auto i:adj[root]){
        if(i==parent) continue;
        lendfs(ans,i,len+1,adj,node,root);
    }
}

int Solution::solve(vector<int> &A) {
    if(A.size()<=1) return 0;
    if(A.size()==2) return 1;
    unordered_map<int,list<int>> adj;
    int root;
    for(int i = 0;i<A.size();i++){
        if(A[i]== -1){
            root = i;
            continue;
        }
        adj[A[i]].push_back(i);
        adj[i].push_back(A[i]);
    }
    int ans = 0;
    int node,mode;
    lendfs(ans,root,0,adj,node,-1);
    int mans = 0;
    lendfs(mans,node,0,adj,mode,-1);
    ans = max(ans,mans);
    }
    return ans;
}


#include <list>
void lendfs(int &ans,int root,int len,unordered_map<int,list<int>> adj){
    auto it = adj.find(root);
    if(it == adj.end()){
        ans = max(ans,len);
        return;
    }
    for(auto i:adj[root]){
        lendfs(ans,i,len+1,adj);
    }
}
int maxlen(int root,unordered_map<int,list<int>> adj){
    auto it = adj.find(root);
    if(it == adj.end()){
        return 0;
    }
    int maxx[2] = {0};
    int ab = 0;
    for(auto i:adj[root]){
        int ans = 0;
        ab = max(ab,maxlen(i,adj));
        lendfs(ans,i,0,adj);
        if(ans+1>maxx[0]){
            maxx[1] = maxx[0];
            maxx[0] = ans+1;
        }
        else if(ans+1>maxx[1]) maxx[1] = ans+1;
    }
    // cout<<root<<" ";
    // cout<<maxx[0]<<" "<<maxx[1]<<" "<<ab<<endl;
    return max(maxx[0]+maxx[1],ab);
    
    
}
int Solution::solve(vector<int> &A) {
    if(A.size()==1) return 0;
    unordered_map<int,list<int>> adj;
    int root;
    for(int i = 0;i<A.size();i++){
        if(A[i]== -1){
            root = i;
            continue;
        }
        adj[A[i]].push_back(i);
    }
    int ans = maxlen(root,adj);
    return ans;
}


int dfshelper(vector<int> a,vector<int> b[],int root,int c,int parent){
    if(c<0) return 0;
    if(b[root].size()==1){
        return 1;
    }
    int ans = 0;
    for(int x:b[root]){
        if(x==parent) continue; 
        ans += dfshelper(a,b,x,c-a[x-1],root);
    }
    // cout<<root<<" "<<ans<<endl;
    return ans;
}

        if(ans+1>maxx[0]) maxx[0] = ans+1;
        else if(ans+1>maxx[1]) maxx[1] = ans+1;
int Solution::solve(vector<int> &A, vector<vector<int> > &B, int C) {
    vector<int> adj[A.size()+1];
     for(int i=0;i<B.size();i++){
        adj[B[i][0]].push_back(B[i][1]);
        adj[B[i][1]].push_back(B[i][0]);
    }
    return dfshelper(A,adj,1,C-1,-1);

}


 A = [0, 1, 0, 1, 1, 1]
 B = [  [1, 2]
        [1, 5]
        [1, 6]
        [2, 3]
        [2, 4]
     ]
 C = 1

int dfshelper(vector<int> a,vector<vector<int>> b,int idx,int c){
    if(idx => b.size()) return 1;
    if(c<0) return 0;
    if(c == 0 && a[b[idx][1]-1]==1) return 0;
    int tempidx = idx;
    int ans = 0;
    for(int i=idx;i<b.size();i++){
        if(b[i][0] != b[idx][0]) break;
        int n = b[i][1];
        while(b[tempidx][0] != n) tempidx++;
        if(a[n-1] == 1) ans += dfshelper(a,b,tempidx,c-1);
        else ans += dfshelper(a,b,tempidx,c);
    }
    return ans;
}

int Solution::solve(vector<int> &A, vector<vector<int> > &B, int C) {

    return dfshelper(A,B,0,C);

}







bool dfshelper(int x,int y,int i,int j,vector<vector<int>> &matrix){
    if(i==x && j==y) return true;
    if(matrix[i][j] == -1) return false;
    matrix[i][j] = 1;
    bool ans;
    if(i>0){
        if(matrix[i-1][j] == 0) ans = dfshelper(x,y,i-1,j,matrix);
        if(j>0 && matrix[i-1][j-1] == 0) ans = ans || dfshelper(x,y,i-1,j-1,matrix);
        if(j <= y-1 && matrix[i-1][j+1]==0) ans = ans || dfshelper(x,y,i-1,j+1,matrix);
    }
    if(i<=x-1){
        if(matrix[i+1][j] == 0) ans = ans || dfshelper(x,y,i+1,j,matrix);
        if(j>0 && matrix[i+1][j-1] == 0) ans = ans || dfshelper(x,y,i+1,j-1,matrix);
        if(j <= y-1 && matrix[i+1][j+1]==0) ans = ans || dfshelper(x,y,i+1,j+1,matrix);
    }
    if(j>0 && matrix[i][j-1] == 0) ans = ans || dfshelper(x,y,i,j-1,matrix);
    if(j <= y-1 && matrix[i][j+1]==0) ans = ans || dfshelper(x,y,i,j+1,matrix);
    return ans;
}

string Solution::solve(int A, int B, int C, int D, vector<int> &E, vector<int> &F) {

    vector<vector<int>> matrix(A+1,vector<int>(B+1,0));
    for (int i = 0; i <= A; i++) {
        for (int j = 0; j <= B; j++) {
            for (int p = 0; p < C; p++) {
                if(E[p]==A && F[p]==B){
                    return "NO";
                }
                if(E[p]==0 && F[p]==0){
                    return "NO";
                }
                if(pow((E[p] - i), 2) + pow((F[p] - j), 2) <= pow(D,2))  {
                    matrix[i][j] = -1;
                }
            }
        }
    }    
    if(dfshelper(A,B,0,0,matrix)) return "YES";
    return "NO";
}


int main() {
    int A =
    vector<int> C =
    vector<int> ans
    cout<<ans[0]<<ans[1];
}
